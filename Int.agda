{-# OPTIONS --cubical #-}
module Int where

open import Nat using (‚Ñï; s)
open import String using (ùïä)
open import Type

infix 8 pos

data ‚Ñ§ : Set where pos negsuc : (n : ‚Ñï) ‚Üí ‚Ñ§

{-# BUILTIN INTEGER       ‚Ñ§    #-}
{-# BUILTIN INTEGERPOS    pos    #-}
{-# BUILTIN INTEGERNEGSUC negsuc #-}

primitive primShowInteger : ‚Ñ§ ‚Üí ùïä

module Sign where
    data Sign : Type where
        + : Sign
        - : Sign
    op : Sign ‚Üí Sign
    op = Œª { + ‚Üí -; - ‚Üí +}
    _*_ : Sign ‚Üí Sign ‚Üí Sign
    + * x = x
    - * x = op x
open Sign using (Sign)
signed : Sign ‚Üí ‚Ñï ‚Üí ‚Ñ§
signed _ 0 = pos 0
signed Sign.+ n = pos n
signed Sign.- (s n) = negsuc n

_+_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
pos 0 + m = m
pos n + pos m = pos (n Nat.+ m)
pos (s n) + negsuc (s m) = pos n + negsuc m
pos (s n) + negsuc 0 = pos n
negsuc (s n) + pos (s m) = negsuc n + pos m
negsuc 0 + pos (s m) = pos m
negsuc n + pos 0 = negsuc n
negsuc n + negsuc m = negsuc (s (n Nat.+ m))

-- _-_ : ‚Ñï ‚Üí ‚Ñï ‚Üí ‚Ñï
-- n     - 0 = n
-- 0  - s m = 0
-- s n - s m = n - m


‚à•_‚à• : ‚Ñ§ ‚Üí ‚Ñï
‚à• pos n ‚à• = n
‚à• negsuc n ‚à• = s n
sign : ‚Ñ§ ‚Üí Sign
sign (pos _) = Sign.+
sign (negsuc _) = Sign.-

_*_ : ‚Ñ§ ‚Üí ‚Ñ§ ‚Üí ‚Ñ§
n * m = signed (sign n Sign.* sign m ) (‚à• n ‚à• Nat.* ‚à• m ‚à•)
